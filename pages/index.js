// @ts-nocheck
import { useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import axios from "axios";

import {
  getSession,
  getCsrfToken,
  getProviders,
  signIn,
} from "next-auth/react";

import {
  InputContainer,
  MainContainer,
  WelcomeText,
  ButtonContainer,
  StyledInput,
  StyledIcon,
  StyledButton,
  LoginWith,
  HorizontalRule,
  IconsContainer,
  ForgotPassword,
  AuthenticationType,
  Authentication,
  Body,
} from "../components/LoginStyledComponents";

import { FaFacebookF, FaGoogle, FaGithub } from "react-icons/fa";
import Link from "next/link";

const FacebookBackground =
  "linear-gradient(to right, #0546A0 0%, #0546A0 40%, #663FB6 100%)";
const GoogleBackground = "linear-gradient(#ad0d71, #0f20ae)";
const GithubBackground = "linear-gradient(to right, #042558 0%, #441e46 50%)";

function Input({ type, placeholder, value, onChange, name, isSignUp }) {
  return (
    <StyledInput
      isSignUp={isSignUp}
      value={value}
      onChange={onChange}
      type={type}
      placeholder={placeholder}
      name={name}
      required
    />
  );
}

function Button({ content, form }) {
  return (
    <StyledButton form={form} type="submit">
      {content}
    </StyledButton>
  );
}

export default function Home({ session, csrfToken, providers }) {
  const [userInfo, setUserInfo] = useState({
    username: "",
    password: "",
    email: "",
  });
  const [autheticationType, setAutheticationType] = useState("Sign In");
  const router = useRouter();

  const handleUserInfo = (event) => {
    const { value, name } = event.target;
    setUserInfo((currentValue) => {
      return {
        ...currentValue,
        [name]: value,
      };
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const { error, url } = await signIn("credentials", {
      username: userInfo.username,
      password: userInfo.password,
      email: userInfo.email,
      redirect: false,
      callbackUrl: "/user",
    });

    if (error) {
      return alert("On users found");
    }
    router.push(url);
  };

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/favicon-32x32.png" />
      </Head>

      <Body>
        <MainContainer isSignUp={autheticationType === "Sign Up"}>
          <WelcomeText>Welcome</WelcomeText>
          <AuthenticationType>
            <Authentication
              authenticationType={autheticationType}
              onClick={() => setAutheticationType("Sign Up")}
            >
              Sign Up
            </Authentication>
            <Authentication
              authenticationType={autheticationType}
              onClick={() => setAutheticationType("Sign In")}
            >
              Sign In
            </Authentication>
          </AuthenticationType>
          <InputContainer
            id="form"
            isSignUp={autheticationType === "Sign Up"}
            onSubmit={handleSubmit}
          >
            <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
            {autheticationType === "Sign Up" && (
              <Input
                isSignUp={autheticationType === "Sign Up"}
                name="username"
                onChange={handleUserInfo}
                value={userInfo.username}
                type="text"
                placeholder="Username"
              />
            )}
            <Input
              isSignUp={autheticationType === "Sign Up"}
              name="email"
              onChange={handleUserInfo}
              value={userInfo.email}
              type="text"
              placeholder="Email"
            />
            <Input
              isSignUp={autheticationType === "Sign Up"}
              name="password"
              onChange={handleUserInfo}
              value={userInfo.password}
              type="password"
              placeholder="Password"
            />
          </InputContainer>
          <ButtonContainer>
            <Button form="form" content={autheticationType} />
          </ButtonContainer>
          <LoginWith>OR LOGIN WITH</LoginWith>
          <HorizontalRule isSignUp={autheticationType === "Sign Up"} />
          <IconsContainer>
            <Link
              href={`${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/connect/facebook`}
            >
              <StyledIcon background={FacebookBackground}>
                <FaFacebookF />
              </StyledIcon>
            </Link>
            <Link
              href={`${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/connect/google`}
            >
              <StyledIcon background={GoogleBackground}>
                <FaGoogle />
              </StyledIcon>
            </Link>
            <Link
              href={`${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/connect/github`}
            >
              <StyledIcon background={GithubBackground}>
                <FaGithub />
              </StyledIcon>
            </Link>
          </IconsContainer>
          <ForgotPassword
            onClick={() => alert("This feature will be added soon")}
          >
            Forgot Password ?
          </ForgotPassword>
        </MainContainer>
      </Body>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);
  const csrfToken = await getCsrfToken(context);
  const providers = await getProviders();

  return { props: { session, csrfToken, providers } };
}
